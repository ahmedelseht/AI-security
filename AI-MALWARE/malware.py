import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

# Load your dataset
data = pd.read_csv('malware_dataset.csv')

# Check class distribution
print("Class Distribution:\n", data['classification'].value_counts())

# Preprocess your data (assuming you already have numeric features)
# Drop columns that are not needed for training (e.g., hash column)
data = data.drop(columns=['hash'])

# Separate features (X) and target (y)
X = data.drop(columns=['classification'])
y = data['classification']

# Encode the target (classification) column if necessary
y = y.map({'malware': 1, 'benign': 0})

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize/Scale the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Cross-validation for Random Forest
rf_model = RandomForestClassifier()
rf_cv_scores = cross_val_score(rf_model, X, y, cv=5, scoring='accuracy')
print("Random Forest Cross-Validation Scores:", rf_cv_scores)
print("Random Forest Mean Accuracy:", rf_cv_scores.mean())

# Train Random Forest model
rf_model.fit(X_train, y_train)
rf_predictions = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_predictions)
print("Random Forest Accuracy:", rf_accuracy)
print("Random Forest Classification Report:\n", classification_report(y_test, rf_predictions))
print("Random Forest Confusion Matrix:\n", confusion_matrix(y_test, rf_predictions))

# Cross-validation for SVM
svm_model = SVC()
svm_cv_scores = cross_val_score(svm_model, X, y, cv=5, scoring='accuracy')
print("SVM Cross-Validation Scores:", svm_cv_scores)
print("SVM Mean Accuracy:", svm_cv_scores.mean())

# Train SVM model
svm_model.fit(X_train, y_train)
svm_predictions = svm_model.predict(X_test)
svm_accuracy = accuracy_score(y_test, svm_predictions)
print("SVM Accuracy:", svm_accuracy)
print("SVM Classification Report:\n", classification_report(y_test, svm_predictions))
print("SVM Confusion Matrix:\n", confusion_matrix(y_test, svm_predictions))

# Cross-validation for Logistic Regression
logreg_model = LogisticRegression(max_iter=1000)
logreg_cv_scores = cross_val_score(logreg_model, X, y, cv=5, scoring='accuracy')
print("Logistic Regression Cross-Validation Scores:", logreg_cv_scores)
print("Logistic Regression Mean Accuracy:", logreg_cv_scores.mean())

# Train Logistic Regression model
logreg_model.fit(X_train, y_train)
logreg_predictions = logreg_model.predict(X_test)
logreg_accuracy = accuracy_score(y_test, logreg_predictions)
print("Logistic Regression Accuracy:", logreg_accuracy)
print("Logistic Regression Classification Report:\n", classification_report(y_test, logreg_predictions))
print("Logistic Regression Confusion Matrix:\n", confusion_matrix(y_test, logreg_predictions))

# Deep Learning Model (Neural Network)
nn_model = Sequential([
    Dense(64, input_dim=X_train.shape[1], activation='relu'),
    Dropout(0.5),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

nn_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
nn_model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

# Evaluate Neural Network Accuracy
nn_loss, nn_accuracy = nn_model.evaluate(X_test, y_test)
print("Neural Network Accuracy:", nn_accuracy)

# Compare Model Performance
print("\nModel Comparison:")
print(f"Random Forest Accuracy: {rf_accuracy}")
print(f"SVM Accuracy: {svm_accuracy}")
print(f"Logistic Regression Accuracy: {logreg_accuracy}")
print(f"Neural Network Accuracy: {nn_accuracy}")

# Final Model Evaluation on Classification Report and Confusion Matrix
print("\nRandom Forest Evaluation:")
print(classification_report(y_test, rf_predictions))
print(confusion_matrix(y_test, rf_predictions))

print("\nSVM Evaluation:")
print(classification_report(y_test, svm_predictions))
print(confusion_matrix(y_test, svm_predictions))

print("\nLogistic Regression Evaluation:")
print(classification_report(y_test, logreg_predictions))
print(confusion_matrix(y_test, logreg_predictions))

print("\nNeural Network Evaluation:")
nn_predictions = (nn_model.predict(X_test) > 0.5).astype("int32")  # Convert sigmoid output to binary predictions
print(classification_report(y_test, nn_predictions))
print(confusion_matrix(y_test, nn_predictions))
